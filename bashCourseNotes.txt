cd bash_course/

#Search all files in the current directory for "foam
        -- grep "foam" *

#Make sub directory as well as any additional child directories
        -- mkdir -p Section_2_Assignment/one/one.one
        -- mkdir -p Section_2_Assignment/two/two.two
        -- mkdir -p Section_2_Assignment/three/three.three

#Search the current directory and its children (recursive) for "foam"
        -- grep -r "foam" *

#Sorting for words, numbers and absolute numbers
        -- vi words
        -- vi nums
        -- sort words
        -- cat words  
        -- sort nums
        -- sort -n nums
        -- vi months
        -- sort -n nums
        -- sort -n months
                -- alphabetic sort
        -- sort -M months
                -- sort according to months

#Processor status with "flag"
        -- ps -elf

#Disk usage with numeric sort showing largest files first
        -- du -sh * | sort -nr

#mount command
        -- sudo mount -o rw -t vfat /dev/sdb1 /media/disk
        -- umount /media/disk

#gzip and zip
        -- gzip will not compress directories
        -- gzip file.txt                --> will give you file.txt.gz, original files no longer exists
        -- gzip -k file.txt             --> doesn't delete original file
        -- gzip -d text.txt.gz          --> decompress file

        -- zip  file.zip file.txt       --> original remains
        -- zip -r doc.zip Documents/    --> recurse the directories
        -- unzip                        --> decompress the file

#tar command
        -- tar -cvf doc.tar /home/sean/Documents/  --> c for create, v for verbose, f for filename
        -- tar -xvf doc.tar

#ssh keys
        -- ssh-keygen -t rsa            --> generate private and public key in ~/.ssh directory

#iptables
        -- tables, chains and targets
        -- default is to allow packets
        -- iptables -A INPUT -s 1.1.1.1 -j REJECT
                -- A - add a rule
                -- s source IP
                -- j what to do with the packets that match
        -- iptables -L --> list the current rules
        -- iptables -D INPUT -s 1.1.1.1 -j REJECT  --> delete a rule

#ufw -uncomplicated firewall
        -- ufw default deny incoming
        -- ufw default allow outgoing
        -- ufw allow ssh (or port number)

#pushd - popd
        -- pushes a directory onto the stack and does a cd
        -- pops a directory off of the stack and does a cd

#!pu
        -- executes the most recent command starting with "pu"

#history
        -- !(then the line number)

#environment variables
        -- local and global
        -- printenv [variable_name]
        -- echo $HOME - must be precended by a $

#set command
        -- set                  --> displays all global variables
        -- set vs env
                Since set is a built-in shell command, it also sees shell-local
                variables (including shell functions). env on the other hand
                is an independent executable; it only sees the variables that
                the shell passes to it, or environment variables. set can also
                report shell options (with the -o switch) which env doesn't.
        -- local vars           --> lower case
        -- global vars          --> all upper case
        -- my_var="Hello"       --> local var
        -- export my_var        --> global var, available to all child processes
        -- unset my_var         --> clears the var

#$PATH
        -- search path for processes
           PATH=$PATH:/new/directory

#Startup intialization scripts
        -- /etc/profile                         --> default for all users
        -- .bashrc                              --> user specific
        -- .bash_profile                        --> on some systems
        -- .bash_login                          --> on some systems
        -- .profile                             --> user specific
        -- /etc/profile.d directory             --> application specific inits, exec'd by the shell on login
        -- users can modify this directory as required

#Variable arrays
        #!/bin/bash
        my_array=(one two three four five)
        echo $my_array                          --> one
        echo ${my_array[2]}                     --> three
        echo ${my_array[*]}                     --> one two three four five
        my_array[2]=seven                       --> changes three to seven

#User management
        --vi /etc/passwd
        -- root     :x                              :0  :0  :root     :/root   :/bin/bash
        -- user name:password location (shadow file):UID:GID:text desc:home dir:default shell

        -- system accounts reserve < 500 for uid
        -- vi /etc/shadow                       --> can only be accessed by the login program

        -- sean     :$y$j9...Ms9r/nkdO1:19399                        :0                                  :99999                                   :7                                      :                                                   :                    :
        -- user name:encrypted password:last pass change (jan 1,1970):min days before pass can be changed:num days before password must be changed:num days before password change warning:num days after expired the account will be disabled:date since disabling:future use

        -- useradd -D --> default parms for new users
                GROUP=100               --> default group
                HOME=/home              --> location of home directory
                INACTIVE=-1             --> accnt can't be disable when passwd expires
                EXPIRE=                 --> accnt can't set to expire on a set date
                SHELL=/bin/sh           --> default shell
                SKEL=/etc/skel          --> skeleton dir used to create new accnt
                CREATE_MAIL_SPOOL=no    --> create mail account for accnt
        -- userdel -r user              --> removes user and their home directory
        -- usermod                      --> -l changes login name, -L lock accnt, -p change password, -U unlock accnt
        -- passwd
        -- chage - force user to change password on next login
                chage -l sean
                Last password change                                    : Feb 11, 2023
                Password expires                                        : never
                Password inactive                                       : never
                Account expires                                         : never
                Minimum number of days between password change          : 0
                Maximum number of days between password change          : 99999
                Number of days of warning before password expires       : 7

#User groups
        --  /etc/groups

        -- sambashare:x             :135:sean,megan,tammy
        -- group name:group password:GID:group membership

        -- groupadd testGroup
        -- usermod -G testGroup sean
        -- groupmod -n testedGroup testGroup

#File permissions
        -- ls -l
        -- first char
                -- "-" file
                -- "d" directory
                -- "l" link
                -- "c" character device
                -- "b" block device
                -- "n" network device
        -- UGO - user group other
        -- rwx - read write execute
        -- umask 0022
                -- sticky bit
                -- Perms                Binary          Octal           Desciptions
                   - - -                000             0               No perms
                   - - x                001             1               Execute
                   - w -                010             2               Write
                   - w r                011             3               Write + execute
                   r - -                100             4               read
                   r - x                101             5               read + execute
                   r w -                110             6               read + write
                   r w x                111             7               read, write, execute
        -- touch test_file
        -- ls -l --> -rw-r--r-- --> 644
        -- full permission for files is 666
        -- full permission for directories is 777
        -- 666 - 022 = 644 --> -rw-r--r--
        -- umask 002 --> changes umask
        -- 666 - 002 = 664 --> rw-rw-r--

        -- chmod 760 file_name -- > rwxrw----
        -- chmod u+x file_name
        -- chmod +x file_name --> adds x to user, group and other

        -- chown root:root file_name
        -- chgrp group_name file_name

        -- sticky bit - permission remain after process has ended
                -- chmod g+s directory_name
                -- umask 002
                -- touch test_dir/file
                -- ls -l test_dir
                        -- -rw-rw-r-- 1 sean test_dir ...

#Scripting
        #!/bin/bash --> # is ignored for first line of scipts, indicates what shell to run the script under
        echo "Hello, World!"
        echo UID: $UID

        vars - can be up to 20 characters of letters, numbers and _
        val1=1 --> don't add spaces or it will try to execute up until the space

        echo $val1; echo $val2 --> can put several statements on the same line

        echo "The date is $(date)"

        today=$(date +%y%m%d) ; echo "Today's date is $today"

        > --> redirect output to a file overwriting
        >> --> redirect output to a file appending
        < --> redirects input to a function/program

        #!/bin/bash
        echo "hi" > hi.txt
        cat hi.txt
        echo "hello" >> hi.txt
        cat hi.txt
        wc < hi.txt

        -- outputs 2 2 9 --> num words, num lines and bytes

        apt list --installed | sort -r > packages.txt           --> show packages install with reverse alpha sort

        BASH MATH
        -- integers only
           val1=$[1+5]
           val2=$[$val1*2]
           echo $val1 ; echo $val2
        -- prints 6 <cr> 12 <cr>

        -- floating point numbers using bc (bash calculator)
           val3=$(echo "scale=4; $val1 / $val2" | bc) ; echo $val3
        -- outputs .5000

        IF STATEMENT

            #!/bin/bash

            if ls -l            # executes "ls -l" first and displays results, if successful completion --> then --> else
            then
                echo "then portion"
            fi

            if dls -l           # this will not execute and display "dls: command not found
            then
                echo "then portion"
            else
                echo "else portion"
            fi

            if dls -l
            then
                echo "then portion"
            elif echo $UID
            then
                echo "elif portion"
            elif uname
            then
                echo "another elif portion"
            else
                echo "else portion"
            fi

        CONDITIONALS
                Integers
                -- n1 -eq n2
                -- n1 -ge n2
                -- n1 -gt n2
                -- n1 -le n2
                -- n1 -lt n2
                -- n1 -ne n2

                Strings
                -- str1 = str2
                -- str1 != str2
                -- str1 < str2
                -- str1 > str2
                -- -n str1  --> length > 0
                -- -z str1  --> length = 0

                Files
                        ## all of these ask "does the file exist" and
                -- -r file         --> is readable
                -- -s file         --> is not empty
                -- -w file         --> is writeable
                -- -x file         --> is executable
                -- -O file         --> is owned by current user
                -- -G file         --> is group same as current user group
                -- file -nt file2  --> file is newer than file2
                -- file -ot file2  --> file is older than file2

                #!/bin/bash

                value1=10
                value2=11

                if [ $value1 -gt 5 ]; then     # not the spaces after [ and before ], semi is just so then can be on the same line, better aesthetics
                        echo "The value $value1 is greater than 5"
                fi

                if [ $val1 \> $val2 ]; then
                        echo "greater than"
                else
                        echo "less than"
                fi

                dir=/home/sean

                if [ -d $dir ]; then
                        echo "The $dir directory exists"
                else
                        echo "The $dir directory does not exist"
                fi

                touch /home/sean/file

                if [ -d $dir ] && [ -w $dir/file ]; then
                        echo "The $dir directory exists and the file exists and we can write to it"
                else
                        echo "The directory does not exist or the file is not writeable"
                fi

        LOOPING

                #!/bin/bash
                for package in $(apt list --installed) ; do
                        echo "Package: $package"
                        sleep 2
                done

                #!/bin/bash
                for package in $(apt list --installed) ; do
                        echo "Package: $package"
                        sleep 2
                done

                #!/bin/bash

                # strings of the form $'...' are called ANSI C-quoted strings.
                # Input Field Separator
                IFS=$'\n'
                ## why don't we need to set IFS to this again after setting it to :

                #for entry in $(cat /etc/passwd); do
                #        echo "Values in $entry --"
                #
                #        # when the for ends : disappears and $'\n' returns because of its scope
                #        IFS=:
                #
                #        for value in $entry; do
                #                echo $value
                #        done
                #        # $'\n' is again the value for IFS
                #done

                IFS=:

                for folder in $PATH; do
                        echo "$folder: -----------------------------------------------"

                        for file in $folder/*; do
                                if [ -x $file ]; then
                                        echo " $file"
                                fi
                        done
                done

                for i in {1..10}; do
                        if [ $i -lt 5 ]; then
                        echo "$i: lower half"
                        elif [ $i -eq 5 ]; then
                                echo "$i: half"
                        else
                                echo "$i: upper half"
                        fi
                done

        USER INPUT
                #!/bin/bash

                total=$[ $1 + $2 ]
                echo "the first parameter is $1"
                echo "the second parameter is $2"
                echo "the total is $total"
                echo "the script name is $0"

                #is the first parameter blank
                if [ -n "$1" ]; then
                        echo "$1"
                else
                        echo "We did not get at least one parameter"
                fi

                # this gives you the number of parameter passed in
                if [ $# == 2 ]; then
                        echo "$1 and $2"
                else
                        echo "We did not get at two parameters"
                fi

	CASE
		             #!/bin/bash

               while [ -n "$1" ]; do
                   case "$1" in
                       -a) echo "found the a option";;
                       -b) echo "found the b option";;
                       -c) echo "found the c option";;
                        *) echo "$1 is not an option";;
                   esac
                   shift
               done

		seanbates@Rancid bashCourse % ./case
		seanbates@Rancid bashCourse % ./case a
		a is not an option
		seanbates@Rancid bashCourse % ./case -a
		found the a option
		seanbates@Rancid bashCourse % ./case -b
		found the b option
		seanbates@Rancid bashCourse % ./case -c
		found the c option
		seanbates@Rancid bashCourse % ./case -d
		-d is not an option
		seanbates@Rancid bashCourse % ./case -a -b -c -d
		found the a option
		found the b option
		found the c option
		-d is not an option


	SON OF USER INPUT
	    	#!/bin/bash

	    	#-n eats the new line character
	    	echo -n "Enter your name: "
	    	read name
	    	echo "Hello, $name"

	    	read -p "Enter the date: " month day year
	    	echo "Date is $month $day $year"

	    	read -t 3 -p "Enter a value: " val
	    	echo "The value is $val"

	    	read -s -p "Silent value collection: " silValue
	    	echo "The value is $silValue"

	    	cat test | while read line; do
            		echo $line
	    	done

	    	echo "Finished processing the file."

	FUNCTIONS
	    	#!/bin/bash

	    	function name {
	    		echo "In the name function"	
	    	}

	    	name2 () {
	    		echo "In the name2 function"
	    	}

	    	name
	    	name2
	    	function mult {
	    		read -p "Enter a value: " value
	    		echo $[ $value * 2 ]
	    	}

	    	result=$(mult)
	    	echo "The result is $result"

	SON OF FUNCTIONS

		  #!/bin/bash

		  function add {

		  	if [ $# -eq 0 ] || [ $# -gt 2 ]; then
		  		echo -1
		  	elif [ $# -eq 1 ]; then
		  		echo $[$1 + $1]
		  	else
		  		echo $[$1 + $2]
		  	fi
		  }

		  result=$(add 1)
		  echo "We expect the result to be 2 and the result is: $result"

		  result1=$(add 3 4)
		  echo "We expect the result to be 7 and the result is: $result1"

		  result2=$(add)
		  echo "We expect the result to be -1 and the result is: $result2"

		  result3=$(add 3 4 5)
		  echo "We expect the result to be -1 and the result is: $result3"



	EXTERNAL LIBRARIES
		library file	
			  #!/bin/bash

			  function mult {
          			echo $[$1 * $2]
			  }

		useLibrary file
			  #!/bin/bash
	
			  source library	#include statement
			  #. ./library    #same as source statement

			  val1=10
			  val2=3

			  result=$(mult $val1 $val2)

			  echo "The result is $result"


	SED
		echo "This is a test" | sed 's/test/big test/ --> results in 'This is a big test'   --> This is a big test
		echo "This is a test" | sed 's|test|big test| --> results in 'This is a big test'   --> same command with different delim
		echo "This is a test" | sed 's\test\big test\ --> results in 'This is a big test'   --> same command with different delim but doesn't work on the Mac

		vim test.txt file
			This is sed test command
			This is sed test command
			This is sed test command

		sed 's/is/was/' test.txt		--> does not change the original file only outputs to the stdout, only replaces the first occurrence
			Thwas is sed test command
			Thwas is sed test command
			Thwas is sed test command

  sed -i 's/is/was/' test.txt		                  --> this changes the original file and only replaces the first occurrence
		sed -i -e 's/is/was/;s/command/run/' test.txt		--> multiple commands on one line
		sed 's/is/was/g' test.txt		                    --> this changes all occurrences of is to was
		sed '2d' test.txt			                           --> deletes the second line
		sed -i '2s/command/asdasdf/' test.txt			       --> only does substitution on the second line
  sed -i '3i This is an inserted line.' test.txt --> inserts before line 3
  sed -i '3a This is an inserted line.' test.txt --> inserts after line 3

GAWK
  gawk '{print $1}' test.txt                     --> results in This several times
  gawk -F: '{print "User: " $1 "\nHome Directory: " $6"\n"}' /etc/passwd --> sets delim char to : and print first and sixth field
  echo "My name is Sean" | gawk '{$4="bonshates"; print $0}'             --> My name is bonshates

REGEX
  regextester.com

        - special characters .*[]^${}\+?|()
        - ^pattern$                             --> beginning of line, pattern and then end of line
        - ^.it$                                 --> be of line, single char, it and then eol
        - ^[ch]at$                              --> matches on cat or hat but not chat
        - ^[a-ch-m]at$                          --> matches aat,bat,cat,hat,iat,jat,kat,lat,mat
        - *                                     --> matches 0 or more times
        - ?                                     --> optional, lazy
        - +                                     --> match 1 or more but must be present
        - .                                     --> match any char except line break

        - ^This line of text$                   --> Matches "This line of text"
                                                --> Does not match "aThis line of text"
                                                --> Does not match "this line of text"
        - ^.it$                                 --> Matches fit, bit, sit, kit, lit, ...
                                                --> Does not match "dwit"
        - ^[ch]at$                              --> Match cat and hat
                                                --> Does not match chat
        - ^colou*r$                             --> Matches color and colour and ALSO colouuuuur
        - ^colou?r$                             --> Matches color and colour but not colouuuuur
        - ^colou+r$                             --> Matches colour and colouuuur but not color
        - ^ca{1}t$                              --> Matches cat but not caat
        - ^ca{1,2}$                             --> Matches cat and caat but not caaat
        - ^cat|dog$                             --> Matches cat or dog
        - ^(b|c)a(r|t)$                         --> Match bar, car, bat and cat

        - need to match
                (223)456-7890                   --> /^\({0,1}[0-9]{3}\){0,1}[0-9]{3}-[0-9]{4}/
                (223) 456-7890                  --> /^\({0,1}[0-9]{3}\){0,1}[ ][0-9]{3}-[0-9]{4}/
                123-456-7890                    --> /^\({0,1}[0-9]{3}\){0,1}-[0-9]{3}-[0-9]{4}/
                123.456.7890                    --> /^\({0,1}[0-9]{3}\){0,1}[.]{1}[0-9]{3}[.]{1}[0-9]{4}/
                                his solution    --> /^\(?[2-9][0-9]{2}\)?(| |-|\.)[0-9]{3}( |-|\.)[0-9]{4}$/gm

ASSIGNMENT 11
        Complete the questions for the Section 11 Assignment
        Questions for this assignment

        Using sed, change all occurrences of "I"(uppercase i) in the assignment.txt to be your name
                                                --> sed  's/I/zzzSeanZZZ/g' text.txt

        Using gawk, print out /etc/passwd, find your username, and change it to be something different
                and have gawk print it out to confirm the change.
                                                --> cat /etc/passwd | grep "sean" | gawk -F: '{print $0; $1="zzzzSeanzzzz"; print $0}'

ASSIGNMENT BACKUP
    #!/bin/bash

    # Get the current date
    DATE=$(date +%y%m%d)

    # Set the archive file name
    FILE=archive_$DATE.tar.gz

    # Set the configuration and destimnate file location
    CONFIG_FILE=/archives/file_to_backup
    DEST=/archive/$FILE

    # Main script

    if [ -f $CONFIG_FILE ]; then
            echo "config was found"
    else
            echo "$CONFIG_FILE was not found"
            echo "Back up will not be completed"
            exit
    fi

    FILE_NO=1       # Start on line 1 of the config file

    exec < $CONFIG_FILE  # Change the input of STDIN to the contents of the config file
    read FILE_NAME  # Read the first record

    while [ $? -eq 0 ] # create the list of files to backup
    do
            if [ -f $FILE_NAME -o -d $FILE_NAME ]; then
                    FILE_LIST="$FILE_LIST $FILE_NAME"
            else
                    echo "$FILE_NAME does not exit"
                    echo "Back up will no include $FILE_NAME"
                    echo "continuing..."
            fi

    done

    tar -czf $DEST $FILE_LIST 2> /dev/null   #send any errors to /dev/null

    echo "Archive is complete"
    echo "Archive is located at $DEST"

    exit


    /etc/cron.daily contains a list of scripts that will be run daily. Verify with run-parts --test /etc/cron.daily
    When exactly does cron.daily, cron.* run grep run-parts /etc/crontab
    crontab  minute(0-59) hour (0-23) day (1-31) month (1-12) day of the week (0-7) where 0 and 7 are Sunday

DISK SPACE REPORT

    #!/bin/bash

    # Parameters

    DIR=" /var/log /home"
    DATE="$(date +%m%d%y)"

    exec > Size_Report_$DATE.txt

    # Make the report file

    echo "Top Ten Disk Space Usage"
    echo "For $DIR Directories"

    for DIR_CHECK in $DIR; do
            echo "The current dirctory is: $DIR_CHECK"
            du -Sh $DIR_CHECK 2> /dev/null |
                    sort -rn |
                    sed '{11, $d; =}' |   #delete rest of lines once line 11 is readched, the = prints the current line number
                    sed 'N; s/\n/ /'  |   #using N command (add a new line) and then it substitutes it out
                    gawk '{printf $1 ":" "\t" $2 "\t" $3 "\n"}'  #1 is the line num, 2 is the size, 3 is the location
            done
    exit

NODEJS
        curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
        sudo bash nodesource_setup.sh
        apt install nodejs -y
        sudo apt install build-essential

        sean@Lainny:~/Desktop/bash_course$ cat hello.js
            const http = require('http');

            const hostname = 'localhost';
            const port = 3000;

            const server = http.createServer((req, res) => {
                    res.statusCode = 200;
                    res.setHeader('Content-Type', 'test-plain');
                    res.end('Hello, World\n');
            });

            server.listen(port, hostname, () => {
                    console.log(`Server running at http://${hostname}:${port}/`);
            });

            sean@Lainny:~/Desktop/bash_course$ node hello.js
                Server running at http://localhost:3000/
            Open http://localhost:3000/

PYTHON venv

        GREAT FOR DEVELOPMENT BUT I ONLY NEED A GENERAL KNOWLEDGE ON THIS
        ALLOWS DEVELOPERS TO INSULATE THEMSELVES FROM DEPENDECY ISSUES

DOCKER LEMP
   sudo apt install ca-certificates curl gnupg lsb-release
   sudo mkdir -p /etc/apt/keyrings
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
   echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   sudo apt update
   sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin
   sudo usermod -aG docker sean
   groups
   sudo reboot
   groups
   docker run hello-world




























